name: Docker

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Repo metadata
        id: repo
        uses: actions/github-script@v6
        with:
          script: |
            return context.repo.repo
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=ghcr.io/jrcichra/kaniko-dispatcher
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=latest
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          fi
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::7}-amd64"
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  build-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Repo metadata
        id: repo
        uses: actions/github-script@v6
        with:
          script: |
            return context.repo.repo
      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Dispatch build to kaniko.jrcichra.dev
        id: dispatch
        uses: jrcichra/kaniko-dispatcher@main
        with:
          name: kaniko-dispatcher
          url: https://kaniko.jrcichra.dev
          context: "git://github.com/jrcichra/kaniko-dispatcher#${{ github.sha }}"
          destination: "ghcr.io/jrcichra/kaniko-dispatcher:sha-${{ steps.vars.outputs.sha_short }}-arm64"
          secret: justin-ghcr-io
          arch: arm64
          headers: |
            {
              "CF-Access-Client-Id" : "93a12e585dcfcf01442b6c75444a228b.access",
              "CF-Access-Client-Secret" : "${{ secrets.ORACLE_K8S_ACCESS_TOKEN }}"
            }

  combine-manifests:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Repo metadata
        id: repo
        uses: actions/github-script@v6
        with:
          script: |
            return context.repo.repo
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Combine manifests
        run: .github/build/manifest.sh
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
          SHA: ${{ github.sha }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
